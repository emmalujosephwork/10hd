name: Deploy to Staging

on:
  workflow_run:
    workflows: ["CI Pipeline"]   # Trigger after CI Pipeline succeeds
    types: [completed]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - uses: actions/checkout@v3

      # Login to Azure using GitHub secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Ensure staging resource group exists
      - name: Ensure Resource Group
        run: |
          az group create --name sit722-staging-rg --location australiaeast

      # Create staging AKS if not exists
      - name: Create or Reuse Staging Cluster
        run: |
          if ! az aks show --name sit722-aks-staging --resource-group sit722-staging-rg &>/dev/null; then
            echo "Creating new AKS staging cluster..."
            az aks create \
              --resource-group sit722-staging-rg \
              --name sit722-aks-staging \
              --node-vm-size Standard_B2s \
              --node-count 1 \
              --generate-ssh-keys
          else
            echo "Staging cluster already exists. Skipping creation."
          fi

      # Wait until cluster is fully provisioned
      - name: Wait for Cluster Readiness
        run: |
          az aks wait \
            --resource-group sit722-staging-rg \
            --name sit722-aks-staging \
            --created

      # Connect kubectl to staging cluster
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group sit722-staging-rg \
            --name sit722-aks-staging \
            --overwrite-existing

      # Ensure namespace and ACR secret exist
      - name: Create Namespace & ACR Secret
        run: |
          kubectl create namespace staging || true
          kubectl delete secret acr-secret -n staging --ignore-not-found
          kubectl create secret docker-registry acr-secret \
            --docker-server=sit722acremmalu.azurecr.io \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            -n staging

      # Deploy manifests into staging
      - name: Deploy to Staging
        run: |
          kubectl apply -f k8s/customer-deployment.yaml -n staging
          kubectl apply -f k8s/customer-service.yaml -n staging
          kubectl apply -f k8s/order-deployment.yaml -n staging
          kubectl apply -f k8s/order-service.yaml -n staging
          kubectl apply -f k8s/product-deployment.yaml -n staging
          kubectl apply -f k8s/product-service.yaml -n staging
          kubectl apply -f k8s/frontend-deployment.yaml -n staging
          kubectl apply -f k8s/frontend-service.yaml -n staging
          kubectl apply -f k8s/ingress.yaml -n staging

      # Wait for deployments to roll out
      - name: Smoke Test
        run: |
          kubectl rollout status deployment/customer-deployment -n staging --timeout=180s
          kubectl rollout status deployment/order-deployment -n staging --timeout=180s
          kubectl rollout status deployment/product-deployment -n staging --timeout=180s
          kubectl rollout status deployment/frontend-deployment -n staging --timeout=180s

          echo "✅ Pods:"
          kubectl get pods -n staging -o wide
          echo "✅ Services:"
          kubectl get svc -n staging

      # Optional cleanup
      # - name: Delete Staging Cluster
      #   if: always()
      #   run: |
      #     echo "Cleaning up staging environment..."
      #     az aks delete --name sit722-aks-staging --resource-group sit722-staging-rg --yes --no-wait
