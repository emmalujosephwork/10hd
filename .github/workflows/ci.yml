name: CI Pipeline

on:
  push:
    branches:
      - testing
      - main

jobs:
  # 1. Run Tests
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - name: Create DBs
        run: |
          sudo apt-get install -y postgresql-client
          for db in customers orders products; do
            PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "CREATE DATABASE $db;" || true
          done
      - name: Run Tests
        run: |
          pip install -r backend/customer_service/requirements-dev.txt
          cd backend/customer_service && pytest -v --disable-warnings
          cd ../..
          pip install -r backend/order_service/requirements-dev.txt
          cd backend/order_service && pytest -v --disable-warnings
          cd ../..
          pip install -r backend/product_service/requirements-dev.txt
          cd backend/product_service && pytest -v --disable-warnings

  # 2. Build & Push Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/docker-login@v1
        with:
          login-server: sit722acremmalu.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build & Push Images
        run: |
          docker build -t sit722acremmalu.azurecr.io/customer_service:latest ./backend/customer_service
          docker push sit722acremmalu.azurecr.io/customer_service:latest
          docker build -t sit722acremmalu.azurecr.io/order_service:latest ./backend/order_service
          docker push sit722acremmalu.azurecr.io/order_service:latest
          docker build -t sit722acremmalu.azurecr.io/product_service:latest ./backend/product_service
          docker push sit722acremmalu.azurecr.io/product_service:latest
          docker build -t sit722acremmalu.azurecr.io/frontend_service:latest ./frontend
          docker push sit722acremmalu.azurecr.io/frontend_service:latest

  # 3. Deploy to Staging (temporary cluster)
  staging-deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/testing'
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create Staging AKS
        run: |
          az group create --name sit722-staging-rg --location australiaeast
          az aks create \
            --resource-group sit722-staging-rg \
            --name sit722StagingCluster \
            --node-count 1 \
            --node-vm-size Standard_B2s \
            --generate-ssh-keys
          az aks get-credentials --resource-group sit722-staging-rg --name sit722StagingCluster --overwrite-existing
      - name: Create Image Pull Secret
        run: |
          kubectl create namespace staging || true
          kubectl create secret docker-registry acr-secret \
            --docker-server=sit722acremmalu.azurecr.io \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            -n staging
      - name: Deploy to Staging
        run: kubectl apply -f k8s/staging/ -n staging
      - name: Smoke Test
        run: kubectl get pods -n staging
      - name: Destroy Staging
        if: always()
        run: az group delete --name sit722-staging-rg --yes --no-wait

  # 4. Deploy to Production (persistent cluster)
  production-deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Connect to Production AKS
        run: |
          az aks get-credentials \
            --resource-group sit722-rg \
            --name sit722-aks-prod \
            --overwrite-existing
      - name: Create Image Pull Secret
        run: |
          kubectl create namespace production || true
          kubectl create secret docker-registry acr-secret \
            --docker-server=sit722acremmalu.azurecr.io \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            -n production
      - name: Deploy to Production
        run: kubectl apply -f k8s/production/ -n production
      - name: Verify Deployments
        run: kubectl get pods -n production
